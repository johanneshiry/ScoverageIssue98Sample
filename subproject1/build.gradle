plugins {
	id "com.jfrog.artifactory" version "4.9.7" //artifactory support
	id 'groovy' // groovy support
	id 'java' // java support
	id 'scala' // scala support
	id 'maven-publish' // publish to a maven repo (local or mvn central, has to be defined)
	id 'pmd' //code check, working on source code
	id 'com.github.spotbugs' version '2.0.0' //code check, working on byte code
	id 'com.diffplug.gradle.spotless' version '3.23.0'//code format
	id 'com.simonharrer.modernizer' version '1.6.0-1' //detect deprecated APIs
	id 'com.github.onslip.gradle-one-jar' version '1.0.5' // pack a self contained jar
	id 'jacoco' // java code coverage plugin
	id "org.sonarqube" version "2.7.1" // sonarqube
	id "org.scoverage" version "4.0.0" // scala code coverage scoverage
}

ext {
	// version (changing these should be considered thoroughly!)
	scalaVersion = '2.13' // for all plugins
	scalaBinaryVersion = '2.13.1' // for scala itself
	slf4jVersion = '1.7.26'
	javaVersion = JavaVersion.VERSION_1_8

	scriptsLocation = 'gradle' + File.separator + 'scripts' + File.separator
	//location of script plugins
}

group = 'edu.ie3'
version = '1.0-SNAPSHOT'
description = 'ieÂ³ code for calculating power flow'
sourceCompatibility = javaVersion
targetCompatibility = javaVersion

apply from: scriptsLocation + 'tests.gradle'
apply from: scriptsLocation + 'pmd.gradle'
apply from: scriptsLocation + 'spotbugs.gradle'
apply from: scriptsLocation + 'spotless.gradle'
apply from: scriptsLocation + 'modernizer.gradle'
apply from: scriptsLocation + 'checkJavaVersion.gradle'
apply from: scriptsLocation + 'selfContainedJar.gradle'
apply from: scriptsLocation + 'jacoco.gradle' // jacoco java code coverage
apply from: scriptsLocation + 'scoverage.gradle' // scoverage scala code coverage


configurations {
	scalaCompilerPlugin
}

repositories {
	mavenLocal() //searches in local maven repository, typically ~/.m2/repository
	jcenter() //searches in bintray's repository 'jCenter', which contains Maven Central


	maven { url 'https://www.jitpack.io' } // allows github repos as dependencies
}

dependencies {

	// logging
	compile "org.slf4j:slf4j-api:${slf4jVersion}"  // slf4j wrapper
	compile 'com.lmax:disruptor:+' // async logging
	compile 'org.apache.logging.log4j:log4j-api:+' // log4j
	compile 'org.apache.logging.log4j:log4j-core:+' // log4j
	compile 'org.apache.logging.log4j:log4j-slf4j-impl:+' // log4j -> slf4j

	compile "com.typesafe.scala-logging:scala-logging_${scalaVersion}:+" // akka scala logging
	compile "com.typesafe.scala-logging:scala-logging-slf4j_2.11:2.1.2" // scala logging
	compile "org.slf4j:log4j-over-slf4j:${slf4jVersion}" // slf4j -> log4j

	// CORE Scala //
	compile "org.scala-lang:scala-library:${scalaBinaryVersion}"

	// testing
	testCompile "org.scalatest:scalatest_${scalaVersion}:3.0.8"
	testRuntime "org.pegdown:pegdown:1.6.0" // HTML report for scalatest
	testCompile 'junit:junit:+'
	testCompile 'org.spockframework:spock-core:1.3-groovy-+'
	testCompile 'cglib:cglib-nodep:+' // enables mocking of classes (in addition to interfaces)
	compile 'org.mockito:mockito-core:+' // mocking framework

	compile 'com.googlecode.matrix-toolkits-java:mtj:+' // matrix data structures
	compile 'org.apache.commons:commons-math3:+'
	compile 'org.apache.commons:commons-lang3:+' // for HashCodeBuilder
	compile 'javax.measure:unit-api:+'
	compile 'org.scalanlp:breeze_2.13:1.0' // Scientific calculations

	spotbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:+' // find bugs in java programs

	compile "com.sksamuel.scapegoat:scalac-scapegoat-plugin_${scalaBinaryVersion}:1.4.1"
	// scala scapegoat
	scalaCompilerPlugin "com.sksamuel.scapegoat:scalac-scapegoat-plugin_${scalaBinaryVersion}:1.4.1"
	// scala scapegoat
}

// scapegoat hook configuration
// https://github.com/sksamuel/scapegoat
// using compileScala instead of tasks.withType(ScalaCompile) prevents applying scapegoat to scala test classes
// see https://docs.gradle.org/current/userguide/scala_plugin.html#sec:configure_scala_classpath for details
compileScala {
	scalaCompileOptions.additionalParameters = [
			"-Xplugin:" + configurations.scalaCompilerPlugin.asPath,
			"-P:scapegoat:dataDir:" + buildDir + "/reports/scapegoat/src/" // see scapegoat-sbt page for this param
	]
}

// separate scapegoat report for test classes
compileTestScala {
	scalaCompileOptions.additionalParameters = [
			"-Xplugin:" + configurations.scalaCompilerPlugin.asPath,
			"-P:scapegoat:dataDir:" + buildDir + "/reports/scapegoat/testsrc/"
	]
}

wrapper {
	gradleVersion = '5.4.1'
}

/* Maven publish - start */
task sourcesJar(type: Jar) {
	getArchiveClassifier().set('sources')
	from(sourceSets.main.allSource)
}

task javadocJar(type: Jar) {
	getArchiveClassifier().set('javadoc')
	from(javadoc.destinationDir)
}

/* Maven publish - end */

tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}
